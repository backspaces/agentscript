{"list":[{"title":"geojson","link":"<a href=\"module-geojson.html\">geojson</a>"},{"title":"module:geojson.flattenMultiLineStrings","link":"<a href=\"module-geojson.html#.flattenMultiLineStrings\">module:geojson &rtrif; flattenMultiLineStrings</a>"},{"title":"module:geojson.lineStringsToLinks","link":"<a href=\"module-geojson.html#.lineStringsToLinks\">module:geojson &rtrif; lineStringsToLinks</a>"},{"title":"gis","link":"<a href=\"module-gis.html\">gis</a>"},{"title":"module:gis.latlon","link":"<a href=\"module-gis.html#.latlon\">module:gis &rtrif; latlon</a>"},{"title":"steg","link":"<a href=\"module-steg.html\">steg</a>"},{"title":"module:steg~charToBits","link":"<a href=\"module-steg.html#~charToBits\">module:steg~charToBits &rtrif; undefined</a>"},{"title":"module:steg~toContext","link":"<a href=\"module-steg.html#~toContext\">module:steg~toContext &rtrif; undefined</a>"},{"title":"module:steg~toUint8Array","link":"<a href=\"module-steg.html#~toUint8Array\">module:steg~toUint8Array &rtrif; undefined</a>"},{"title":"utils","link":"<a href=\"module-utils.html\">utils</a>"},{"title":"module:utils.clamp","link":"<a href=\"module-utils.html#.clamp\">module:utils &rtrif; clamp</a>"},{"title":"module:utils.createCanvas","link":"<a href=\"module-utils.html#.createCanvas\">module:utils &rtrif; createCanvas</a>"},{"title":"module:utils.createCtx","link":"<a href=\"module-utils.html#.createCtx\">module:utils &rtrif; createCtx</a>"},{"title":"module:utils.degToRad","link":"<a href=\"module-utils.html#.degToRad\">module:utils &rtrif; degToRad</a>"},{"title":"module:utils.headingToRad","link":"<a href=\"module-utils.html#.headingToRad\">module:utils &rtrif; headingToRad</a>"},{"title":"module:utils.imagePromise","link":"<a href=\"module-utils.html#.imagePromise\">module:utils &rtrif; imagePromise</a>"},{"title":"module:utils.mod","link":"<a href=\"module-utils.html#.mod\">module:utils &rtrif; mod</a>"},{"title":"module:utils.oneOf","link":"<a href=\"module-utils.html#.oneOf\">module:utils &rtrif; oneOf</a>"},{"title":"module:utils.precision","link":"<a href=\"module-utils.html#.precision\">module:utils &rtrif; precision</a>"},{"title":"module:utils.radToDeg","link":"<a href=\"module-utils.html#.radToDeg\">module:utils &rtrif; radToDeg</a>"},{"title":"module:utils.radToHeading","link":"<a href=\"module-utils.html#.radToHeading\">module:utils &rtrif; radToHeading</a>"},{"title":"module:utils.randomCentered","link":"<a href=\"module-utils.html#.randomCentered\">module:utils &rtrif; randomCentered</a>"},{"title":"module:utils.randomFloat","link":"<a href=\"module-utils.html#.randomFloat\">module:utils &rtrif; randomFloat</a>"},{"title":"module:utils.randomFloat2","link":"<a href=\"module-utils.html#.randomFloat2\">module:utils &rtrif; randomFloat2</a>"},{"title":"module:utils.randomInt","link":"<a href=\"module-utils.html#.randomInt\">module:utils &rtrif; randomInt</a>"},{"title":"module:utils.randomInt2","link":"<a href=\"module-utils.html#.randomInt2\">module:utils &rtrif; randomInt2</a>"},{"title":"module:utils.randomSeed","link":"<a href=\"module-utils.html#.randomSeed\">module:utils &rtrif; randomSeed</a>"},{"title":"module:utils.repeat","link":"<a href=\"module-utils.html#.repeat\">module:utils &rtrif; repeat</a>"},{"title":"module:utils.sampleModel","link":"<a href=\"module-utils.html#.sampleModel\">module:utils &rtrif; sampleModel</a>"},{"title":"module:utils.setCtxImage","link":"<a href=\"module-utils.html#.setCtxImage\">module:utils &rtrif; setCtxImage</a>"},{"title":"module:utils.subtractHeadings","link":"<a href=\"module-utils.html#.subtractHeadings\">module:utils &rtrif; subtractHeadings</a>"},{"title":"module:utils.timeoutLoop","link":"<a href=\"module-utils.html#.timeoutLoop\">module:utils &rtrif; timeoutLoop</a>"},{"title":"module:utils.timeoutPromise","link":"<a href=\"module-utils.html#.timeoutPromise\">module:utils &rtrif; timeoutPromise</a>"},{"title":"module:utils.toWindow","link":"<a href=\"module-utils.html#.toWindow\">module:utils &rtrif; toWindow</a>"},{"title":"module:utils.xhrPromise","link":"<a href=\"module-utils.html#.xhrPromise\">module:utils &rtrif; xhrPromise</a>"},{"title":"AgentArray","link":"<a href=\"AgentArray.html\">AgentArray</a>","description":"<p>Creates an instance of AgentArray. Simply pass-through to super()\nnow, but may add initialization code later.</p>"},{"title":"AgentArray.fromArray","link":"<a href=\"AgentArray.html#.fromArray\">AgentArray &rtrif; fromArray</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#all","link":"<a href=\"AgentArray.html#all\">AgentArray &rtrif; all</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#ask","link":"<a href=\"AgentArray.html#ask\">AgentArray &rtrif; ask</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#atIndex","link":"<a href=\"AgentArray.html#atIndex\">AgentArray &rtrif; atIndex</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#clone","link":"<a href=\"AgentArray.html#clone\">AgentArray &rtrif; clone</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#first","link":"<a href=\"AgentArray.html#first\">AgentArray &rtrif; first</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#forLoop","link":"<a href=\"AgentArray.html#forLoop\">AgentArray &rtrif; forLoop</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#isEmpty","link":"<a href=\"AgentArray.html#isEmpty\">AgentArray &rtrif; isEmpty</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#last","link":"<a href=\"AgentArray.html#last\">AgentArray &rtrif; last</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#props","link":"<a href=\"AgentArray.html#props\">AgentArray &rtrif; props</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#sortBy","link":"<a href=\"AgentArray.html#sortBy\">AgentArray &rtrif; sortBy</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#toArray","link":"<a href=\"AgentArray.html#toArray\">AgentArray &rtrif; toArray</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#typedSample","link":"<a href=\"AgentArray.html#typedSample\">AgentArray &rtrif; typedSample</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#uniq","link":"<a href=\"AgentArray.html#uniq\">AgentArray &rtrif; uniq</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentArray#with","link":"<a href=\"AgentArray.html#with\">AgentArray &rtrif; with</a>","description":"<p>Subclass of Array with convenience methods used by NetLogo.\nTipically the items in the array are Objects but can be any type.</p>"},{"title":"AgentList","link":"<a href=\"AgentList.html\">AgentList</a>"},{"title":"AgentList#inCone","link":"<a href=\"AgentList.html#inCone\">AgentList &rtrif; inCone</a>","description":"<p>Geometry methods for patches, turtles, and other AgentArrays\nReturn all agents within rect, radius, cone from given agent.\nIf meToo, include given object, default excludes it\nTypically the AgentArray is a subset of larger sets, reducing\nthe size, then uses these inRect, inRadius or inCone methods</p>"},{"title":"AgentList#inRadius","link":"<a href=\"AgentList.html#inRadius\">AgentList &rtrif; inRadius</a>","description":"<p>Geometry methods for patches, turtles, and other AgentArrays\nReturn all agents within rect, radius, cone from given agent.\nIf meToo, include given object, default excludes it\nTypically the AgentArray is a subset of larger sets, reducing\nthe size, then uses these inRect, inRadius or inCone methods</p>"},{"title":"AgentList#inRect","link":"<a href=\"AgentList.html#inRect\">AgentList &rtrif; inRect</a>","description":"<p>Geometry methods for patches, turtles, and other AgentArrays\nReturn all agents within rect, radius, cone from given agent.\nIf meToo, include given object, default excludes it\nTypically the AgentArray is a subset of larger sets, reducing\nthe size, then uses these inRect, inRadius or inCone methods</p>"},{"title":"AgentSet","link":"<a href=\"AgentSet.html\">AgentSet</a>"},{"title":"AgentSet#addAgent","link":"<a href=\"AgentSet.html#addAgent\">AgentSet &rtrif; addAgent</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#ask","link":"<a href=\"AgentSet.html#ask\">AgentSet &rtrif; ask</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#askSet","link":"<a href=\"AgentSet.html#askSet\">AgentSet &rtrif; askSet</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#clear","link":"<a href=\"AgentSet.html#clear\">AgentSet &rtrif; clear</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#getDefault","link":"<a href=\"AgentSet.html#getDefault\">AgentSet &rtrif; getDefault</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#isBaseSet","link":"<a href=\"AgentSet.html#isBaseSet\">AgentSet &rtrif; isBaseSet</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#isBreedSet","link":"<a href=\"AgentSet.html#isBreedSet\">AgentSet &rtrif; isBreedSet</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#newBreed","link":"<a href=\"AgentSet.html#newBreed\">AgentSet &rtrif; newBreed</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#protoMixin","link":"<a href=\"AgentSet.html#protoMixin\">AgentSet &rtrif; protoMixin</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#removeAgent","link":"<a href=\"AgentSet.html#removeAgent\">AgentSet &rtrif; removeAgent</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#setBreed","link":"<a href=\"AgentSet.html#setBreed\">AgentSet &rtrif; setBreed</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#setDefault","link":"<a href=\"AgentSet.html#setDefault\">AgentSet &rtrif; setDefault</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"AgentSet#withBreed","link":"<a href=\"AgentSet.html#withBreed\">AgentSet &rtrif; withBreed</a>","description":"<p>A model's {@link Patches}, {@link Turtles}, {@link Links},\nare all subclasses of AgentSet.</p>\n<p>AgentSets are {@link AgentArray}s that are factories for their own Agents.\nThat means you do <em>not</em> call <code>new Turtle()</code>, rather Turtles\nwill create the Turtle instances, adding them to itself.</p>\n<p>Finally, a Breed is simply a subarray of Patches, Turtles, Links.\nPatches could have a Streets breed, Turtles could have Cops and Robbers\nbreeds, and Links Spokes and Rim breeds</p>\n<p>AgentSets are not created directly by modelers.\nInstead, class {@link Model} creates them along with their Breeds.\nYou can easily skip this initially, instead simply understand AgentSets\nare the basis for Patches, Turtles, Links &amp; Breeds</p>"},{"title":"Animator","link":"<a href=\"Animator.html\">Animator</a>","description":"<p>Sets parameters, then calls start().\nTo have the model not start immediately do:</p>\n<ul>\n<li>const anim = new Animator(&lt;args&gt;).stop()</li>\n</ul>"},{"title":"Animator#start","link":"<a href=\"Animator.html#start\">Animator &rtrif; start</a>","description":"<p>Class Animator controls running of a function.</p>"},{"title":"Animator#stop","link":"<a href=\"Animator.html#stop\">Animator &rtrif; stop</a>","description":"<p>Class Animator controls running of a function.</p>"},{"title":"DataSet","link":"<a href=\"DataSet.html\">DataSet</a>","description":"<p>Creates an instance of DataSet.\nChecks data is right size, throws an error if not.</p>"},{"title":"DataSet.emptyDataSet","link":"<a href=\"DataSet.html#.emptyDataSet\">DataSet &rtrif; emptyDataSet</a>","description":"<p>A DataSet is an object with width/height and an array\nof numbers of length = width * height.</p>\n<p>The array can be a TypedArray or a JavaScript Array.</p>"},{"title":"GUI","link":"<a href=\"GUI.html\">GUI</a>"},{"title":"GUI#addUI","link":"<a href=\"GUI.html#addUI\">GUI &rtrif; addUI</a>"},{"title":"Link","link":"<a href=\"Link.html\">Link</a>"},{"title":"Links","link":"<a href=\"Links.html\">Links</a>"},{"title":"Model2D","link":"<a href=\"Model2D.html\">Model2D</a>"},{"title":"Model2D#linkBreeds","link":"<a href=\"Model2D.html#linkBreeds\">Model2D &rtrif; linkBreeds</a>","description":"<p>Class Model2D is the primary interface for modelers, integrating\nthe Patches/Patch Turtles/Turtle and Links/Link AgentSets .. i.e.:</p>\n<ul>\n<li>model.Patches: an array {@link Patches} of {@link Patch} instances</li>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle2D} instances</li>\n<li>model.Links: an array {@link Links} of {@link Link} instances</li>\n<li>model.breed: a sub-array of any of the three above.</li>\n<li>All of which are subclasses of {@link AgentSet}.</li>\n</ul>\n<p><em>Note</em>: Our default class Model differes only in that</p>\n<ul>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle3D} instances</li>\n</ul>\n<p>Convention: Three abstract methods are provided by the modeler</p>\n<ul>\n<li>Startup(): (Optional) Called once to import images, data etc</li>\n<li>Setup(): Called to initialize the model state.</li>\n<li>Step(): Step the model. Will advance ticks.</li>\n</ul>"},{"title":"Model2D#patchBreeds","link":"<a href=\"Model2D.html#patchBreeds\">Model2D &rtrif; patchBreeds</a>","description":"<p>Class Model2D is the primary interface for modelers, integrating\nthe Patches/Patch Turtles/Turtle and Links/Link AgentSets .. i.e.:</p>\n<ul>\n<li>model.Patches: an array {@link Patches} of {@link Patch} instances</li>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle2D} instances</li>\n<li>model.Links: an array {@link Links} of {@link Link} instances</li>\n<li>model.breed: a sub-array of any of the three above.</li>\n<li>All of which are subclasses of {@link AgentSet}.</li>\n</ul>\n<p><em>Note</em>: Our default class Model differes only in that</p>\n<ul>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle3D} instances</li>\n</ul>\n<p>Convention: Three abstract methods are provided by the modeler</p>\n<ul>\n<li>Startup(): (Optional) Called once to import images, data etc</li>\n<li>Setup(): Called to initialize the model state.</li>\n<li>Step(): Step the model. Will advance ticks.</li>\n</ul>"},{"title":"Model2D#reset","link":"<a href=\"Model2D.html#reset\">Model2D &rtrif; reset</a>","description":"<p>Class Model2D is the primary interface for modelers, integrating\nthe Patches/Patch Turtles/Turtle and Links/Link AgentSets .. i.e.:</p>\n<ul>\n<li>model.Patches: an array {@link Patches} of {@link Patch} instances</li>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle2D} instances</li>\n<li>model.Links: an array {@link Links} of {@link Link} instances</li>\n<li>model.breed: a sub-array of any of the three above.</li>\n<li>All of which are subclasses of {@link AgentSet}.</li>\n</ul>\n<p><em>Note</em>: Our default class Model differes only in that</p>\n<ul>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle3D} instances</li>\n</ul>\n<p>Convention: Three abstract methods are provided by the modeler</p>\n<ul>\n<li>Startup(): (Optional) Called once to import images, data etc</li>\n<li>Setup(): Called to initialize the model state.</li>\n<li>Step(): Step the model. Will advance ticks.</li>\n</ul>"},{"title":"Model2D#setup","link":"<a href=\"Model2D.html#setup\">Model2D &rtrif; setup</a>","description":"<p>Class Model2D is the primary interface for modelers, integrating\nthe Patches/Patch Turtles/Turtle and Links/Link AgentSets .. i.e.:</p>\n<ul>\n<li>model.Patches: an array {@link Patches} of {@link Patch} instances</li>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle2D} instances</li>\n<li>model.Links: an array {@link Links} of {@link Link} instances</li>\n<li>model.breed: a sub-array of any of the three above.</li>\n<li>All of which are subclasses of {@link AgentSet}.</li>\n</ul>\n<p><em>Note</em>: Our default class Model differes only in that</p>\n<ul>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle3D} instances</li>\n</ul>\n<p>Convention: Three abstract methods are provided by the modeler</p>\n<ul>\n<li>Startup(): (Optional) Called once to import images, data etc</li>\n<li>Setup(): Called to initialize the model state.</li>\n<li>Step(): Step the model. Will advance ticks.</li>\n</ul>"},{"title":"Model2D#startup","link":"<a href=\"Model2D.html#startup\">Model2D &rtrif; startup</a>","description":"<p>Class Model2D is the primary interface for modelers, integrating\nthe Patches/Patch Turtles/Turtle and Links/Link AgentSets .. i.e.:</p>\n<ul>\n<li>model.Patches: an array {@link Patches} of {@link Patch} instances</li>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle2D} instances</li>\n<li>model.Links: an array {@link Links} of {@link Link} instances</li>\n<li>model.breed: a sub-array of any of the three above.</li>\n<li>All of which are subclasses of {@link AgentSet}.</li>\n</ul>\n<p><em>Note</em>: Our default class Model differes only in that</p>\n<ul>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle3D} instances</li>\n</ul>\n<p>Convention: Three abstract methods are provided by the modeler</p>\n<ul>\n<li>Startup(): (Optional) Called once to import images, data etc</li>\n<li>Setup(): Called to initialize the model state.</li>\n<li>Step(): Step the model. Will advance ticks.</li>\n</ul>"},{"title":"Model2D#step","link":"<a href=\"Model2D.html#step\">Model2D &rtrif; step</a>","description":"<p>Class Model2D is the primary interface for modelers, integrating\nthe Patches/Patch Turtles/Turtle and Links/Link AgentSets .. i.e.:</p>\n<ul>\n<li>model.Patches: an array {@link Patches} of {@link Patch} instances</li>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle2D} instances</li>\n<li>model.Links: an array {@link Links} of {@link Link} instances</li>\n<li>model.breed: a sub-array of any of the three above.</li>\n<li>All of which are subclasses of {@link AgentSet}.</li>\n</ul>\n<p><em>Note</em>: Our default class Model differes only in that</p>\n<ul>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle3D} instances</li>\n</ul>\n<p>Convention: Three abstract methods are provided by the modeler</p>\n<ul>\n<li>Startup(): (Optional) Called once to import images, data etc</li>\n<li>Setup(): Called to initialize the model state.</li>\n<li>Step(): Step the model. Will advance ticks.</li>\n</ul>"},{"title":"Model2D#tick","link":"<a href=\"Model2D.html#tick\">Model2D &rtrif; tick</a>","description":"<p>Class Model2D is the primary interface for modelers, integrating\nthe Patches/Patch Turtles/Turtle and Links/Link AgentSets .. i.e.:</p>\n<ul>\n<li>model.Patches: an array {@link Patches} of {@link Patch} instances</li>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle2D} instances</li>\n<li>model.Links: an array {@link Links} of {@link Link} instances</li>\n<li>model.breed: a sub-array of any of the three above.</li>\n<li>All of which are subclasses of {@link AgentSet}.</li>\n</ul>\n<p><em>Note</em>: Our default class Model differes only in that</p>\n<ul>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle3D} instances</li>\n</ul>\n<p>Convention: Three abstract methods are provided by the modeler</p>\n<ul>\n<li>Startup(): (Optional) Called once to import images, data etc</li>\n<li>Setup(): Called to initialize the model state.</li>\n<li>Step(): Step the model. Will advance ticks.</li>\n</ul>"},{"title":"Model2D#turtleBreeds","link":"<a href=\"Model2D.html#turtleBreeds\">Model2D &rtrif; turtleBreeds</a>","description":"<p>Class Model2D is the primary interface for modelers, integrating\nthe Patches/Patch Turtles/Turtle and Links/Link AgentSets .. i.e.:</p>\n<ul>\n<li>model.Patches: an array {@link Patches} of {@link Patch} instances</li>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle2D} instances</li>\n<li>model.Links: an array {@link Links} of {@link Link} instances</li>\n<li>model.breed: a sub-array of any of the three above.</li>\n<li>All of which are subclasses of {@link AgentSet}.</li>\n</ul>\n<p><em>Note</em>: Our default class Model differes only in that</p>\n<ul>\n<li>model.Turtles: an array {@link Turtles} of {@link Turtle3D} instances</li>\n</ul>\n<p>Convention: Three abstract methods are provided by the modeler</p>\n<ul>\n<li>Startup(): (Optional) Called once to import images, data etc</li>\n<li>Setup(): Called to initialize the model state.</li>\n<li>Step(): Step the model. Will advance ticks.</li>\n</ul>"},{"title":"Model3D","link":"<a href=\"Model3D.html\">Model3D</a>"},{"title":"Mouse","link":"<a href=\"Mouse.html\">Mouse</a>","description":"<p>Create and start mouse obj, args: a model, and a callback method.</p>"},{"title":"Mouse#start","link":"<a href=\"Mouse.html#start\">Mouse &rtrif; start</a>","description":"<p>A NetLogo-like mouse handler.</p>\n<p><strong>TODO: Example usage.</strong></p>"},{"title":"Patch","link":"<a href=\"Patch.html\">Patch</a>"},{"title":"Patch#breedsHere","link":"<a href=\"Patch.html#breedsHere\">Patch &rtrif; breedsHere</a>","description":"<p>Class Patch instances represent a square on the {@link Patches} grid.\nThey hold variables\nthat are in the patches the turtles live on.  The set of all patches\nis the world on which the turtles live and the model runs.</p>\n<p>You do not use <code>new Patch</code>, rather Class {@link Model} creates the patches\nfor you, using the {@link World} data passed to the Model.</p>\n<p>You <em>never</em> do this:</p>"},{"title":"Patch#isOnEdge","link":"<a href=\"Patch.html#isOnEdge\">Patch &rtrif; isOnEdge</a>","description":"<p>Class Patch instances represent a square on the {@link Patches} grid.\nThey hold variables\nthat are in the patches the turtles live on.  The set of all patches\nis the world on which the turtles live and the model runs.</p>\n<p>You do not use <code>new Patch</code>, rather Class {@link Model} creates the patches\nfor you, using the {@link World} data passed to the Model.</p>\n<p>You <em>never</em> do this:</p>"},{"title":"Patches","link":"<a href=\"Patches.html\">Patches</a>","description":"<p>Creates an instance of Patches.</p>"},{"title":"Patches#exportDataSet","link":"<a href=\"Patches.html#exportDataSet\">Patches &rtrif; exportDataSet</a>","description":"<p>Patches are the world other AgentSets live on.\nThey define a coord system from the Model's World values:\nminX, maxX, minY, maxY, (minZ, maxZ) (z optional)</p>\n<p>Patches form a grid of Patch objects which can store world data\n(elevation, fires, ant pheromones, buildings, roads, gis spatial data, water and so on)</p>\n<p>Created by class Model. Used by modeler in their Model subclass</p>"},{"title":"Patches#importDataSet","link":"<a href=\"Patches.html#importDataSet\">Patches &rtrif; importDataSet</a>","description":"<p>Patches are the world other AgentSets live on.\nThey define a coord system from the Model's World values:\nminX, maxX, minY, maxY, (minZ, maxZ) (z optional)</p>\n<p>Patches form a grid of Patch objects which can store world data\n(elevation, fires, ant pheromones, buildings, roads, gis spatial data, water and so on)</p>\n<p>Created by class Model. Used by modeler in their Model subclass</p>"},{"title":"Patches#neighbors","link":"<a href=\"Patches.html#neighbors\">Patches &rtrif; neighbors</a>","description":"<p>Patches are the world other AgentSets live on.\nThey define a coord system from the Model's World values:\nminX, maxX, minY, maxY, (minZ, maxZ) (z optional)</p>\n<p>Patches form a grid of Patch objects which can store world data\n(elevation, fires, ant pheromones, buildings, roads, gis spatial data, water and so on)</p>\n<p>Created by class Model. Used by modeler in their Model subclass</p>"},{"title":"Patches#neighbors4","link":"<a href=\"Patches.html#neighbors4\">Patches &rtrif; neighbors4</a>","description":"<p>Patches are the world other AgentSets live on.\nThey define a coord system from the Model's World values:\nminX, maxX, minY, maxY, (minZ, maxZ) (z optional)</p>\n<p>Patches form a grid of Patch objects which can store world data\n(elevation, fires, ant pheromones, buildings, roads, gis spatial data, water and so on)</p>\n<p>Created by class Model. Used by modeler in their Model subclass</p>"},{"title":"Patches#patchIndex","link":"<a href=\"Patches.html#patchIndex\">Patches &rtrif; patchIndex</a>","description":"<p>Patches are the world other AgentSets live on.\nThey define a coord system from the Model's World values:\nminX, maxX, minY, maxY, (minZ, maxZ) (z optional)</p>\n<p>Patches form a grid of Patch objects which can store world data\n(elevation, fires, ant pheromones, buildings, roads, gis spatial data, water and so on)</p>\n<p>Created by class Model. Used by modeler in their Model subclass</p>"},{"title":"RGBDataSet","link":"<a href=\"RGBDataSet.html\">RGBDataSet</a>","description":"<p>Create a {@link DataSet} from image pixel data</p>"},{"title":"RGBDataSet.rgbScaleFunction","link":"<a href=\"RGBDataSet.html#.rgbScaleFunction\">RGBDataSet &rtrif; rgbScaleFunction</a>","description":"<p>Class for converting an image to a DataSet.</p>"},{"title":"RGBDataSet.rgbToInt24","link":"<a href=\"RGBDataSet.html#.rgbToInt24\">RGBDataSet &rtrif; rgbToInt24</a>","description":"<p>Class for converting an image to a DataSet.</p>"},{"title":"ThreeDraw","link":"<a href=\"ThreeDraw.html\">ThreeDraw</a>"},{"title":"Turtle","link":"<a href=\"Turtle.html\">Turtle</a>"},{"title":"Turtle#canMove","link":"<a href=\"Turtle.html#canMove\">Turtle &rtrif; canMove</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#die","link":"<a href=\"Turtle.html#die\">Turtle &rtrif; die</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#distance","link":"<a href=\"Turtle.html#distance\">Turtle &rtrif; distance</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#distanceXY","link":"<a href=\"Turtle.html#distanceXY\">Turtle &rtrif; distanceXY</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#face","link":"<a href=\"Turtle.html#face\">Turtle &rtrif; face</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#facexy","link":"<a href=\"Turtle.html#facexy\">Turtle &rtrif; facexy</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#forward","link":"<a href=\"Turtle.html#forward\">Turtle &rtrif; forward</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#handleEdge","link":"<a href=\"Turtle.html#handleEdge\">Turtle &rtrif; handleEdge</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#hatch","link":"<a href=\"Turtle.html#hatch\">Turtle &rtrif; hatch</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#isLinkNeighbor","link":"<a href=\"Turtle.html#isLinkNeighbor\">Turtle &rtrif; isLinkNeighbor</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#left","link":"<a href=\"Turtle.html#left\">Turtle &rtrif; left</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#linkNeighbors","link":"<a href=\"Turtle.html#linkNeighbors\">Turtle &rtrif; linkNeighbors</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#moveTo","link":"<a href=\"Turtle.html#moveTo\">Turtle &rtrif; moveTo</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#otherEnd","link":"<a href=\"Turtle.html#otherEnd\">Turtle &rtrif; otherEnd</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#patchAhead","link":"<a href=\"Turtle.html#patchAhead\">Turtle &rtrif; patchAhead</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#patchAt","link":"<a href=\"Turtle.html#patchAt\">Turtle &rtrif; patchAt</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#patchAtHeadingAndDistance","link":"<a href=\"Turtle.html#patchAtHeadingAndDistance\">Turtle &rtrif; patchAtHeadingAndDistance</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#patchLeftAndAhead","link":"<a href=\"Turtle.html#patchLeftAndAhead\">Turtle &rtrif; patchLeftAndAhead</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#patchRightAndAhead","link":"<a href=\"Turtle.html#patchRightAndAhead\">Turtle &rtrif; patchRightAndAhead</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#right","link":"<a href=\"Turtle.html#right\">Turtle &rtrif; right</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#rotate","link":"<a href=\"Turtle.html#rotate\">Turtle &rtrif; rotate</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#setxy","link":"<a href=\"Turtle.html#setxy\">Turtle &rtrif; setxy</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#subtractHeading","link":"<a href=\"Turtle.html#subtractHeading\">Turtle &rtrif; subtractHeading</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#towards","link":"<a href=\"Turtle.html#towards\">Turtle &rtrif; towards</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle#towardsXY","link":"<a href=\"Turtle.html#towardsXY\">Turtle &rtrif; towardsXY</a>","description":"<p>Class Turtle instances represent the dynamic, behavioral element of modeling.\nEach turtle knows the patch it is on, and interacts with that and other\npatches, as well as other turtles. Turtles are also the end points of Links.</p>\n<p>You do not call <code>new Turtle()</code>, instead class Turtles creates Turtle instances\nvia {@link Turtles#create} or  {@link Turtles#createOne}</p>\n<p>I.e. class Turtles is a factory for all of it's Turtle instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle3D","link":"<a href=\"Turtle3D.html\">Turtle3D</a>"},{"title":"Turtle3D#reset","link":"<a href=\"Turtle3D.html#reset\">Turtle3D &rtrif; reset</a>","description":"<p>Class Turtle3D subclasses  {@link Turtles}, adding 3D methods using\nThree.js's Object3D module.\nSee <a href=\"https://ccl.northwestern.edu/netlogo/docs/3d.html\">NetLogo</a>\nwho's 3D semantics we follow.</p>\n<p>Just as with Turtle, you do not call <code>new Turtle3D()</code>,\ninstead class Turtles creates Turtle3D instances via\n{@link Model} modifying the Turtles/Turtle3D initialization.</p>\n<p>3D is the default. To revert to 2D, see {@link Model2D}</p>\n<p>Again, class Turtles is a factory for all of it's Turtle3D instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtle3D#setxyz","link":"<a href=\"Turtle3D.html#setxyz\">Turtle3D &rtrif; setxyz</a>","description":"<p>Class Turtle3D subclasses  {@link Turtles}, adding 3D methods using\nThree.js's Object3D module.\nSee <a href=\"https://ccl.northwestern.edu/netlogo/docs/3d.html\">NetLogo</a>\nwho's 3D semantics we follow.</p>\n<p>Just as with Turtle, you do not call <code>new Turtle3D()</code>,\ninstead class Turtles creates Turtle3D instances via\n{@link Model} modifying the Turtles/Turtle3D initialization.</p>\n<p>3D is the default. To revert to 2D, see {@link Model2D}</p>\n<p>Again, class Turtles is a factory for all of it's Turtle3D instances.\nSo <em>don't</em> do this:</p>"},{"title":"Turtles","link":"<a href=\"Turtles.html\">Turtles</a>"},{"title":"Turtles#closestTurtle","link":"<a href=\"Turtles.html#closestTurtle\">Turtles &rtrif; closestTurtle</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"Turtles#create","link":"<a href=\"Turtles.html#create\">Turtles &rtrif; create</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"Turtles#createOne","link":"<a href=\"Turtles.html#createOne\">Turtles &rtrif; createOne</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"Turtles#inCone","link":"<a href=\"Turtles.html#inCone\">Turtles &rtrif; inCone</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"Turtles#inPatches","link":"<a href=\"Turtles.html#inPatches\">Turtles &rtrif; inPatches</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"Turtles#inPatchRect","link":"<a href=\"Turtles.html#inPatchRect\">Turtles &rtrif; inPatchRect</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"Turtles#inPatchRectXY","link":"<a href=\"Turtles.html#inPatchRectXY\">Turtles &rtrif; inPatchRectXY</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"Turtles#inRadius","link":"<a href=\"Turtles.html#inRadius\">Turtles &rtrif; inRadius</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"Turtles#layoutCircle","link":"<a href=\"Turtles.html#layoutCircle\">Turtles &rtrif; layoutCircle</a>","description":"<p>A {@link Turtle} is an object living on the {@link Patches} world.\nTheir coordinates are floats, unlike Patches with integer coordinates.\nThey can morph between types of turtles (breeds) and storee information,\nboth within themselves but also on Patches and Links.</p>\n<p>The Turtles (plural) array, (AgentSet) is a collection of Turtle objects\nthat the Turtles array creates and manages.</p>\n<p>You do not create either individual Turtle objects, the Turtles array does.\nYou also do not create the Turtles array, class {@link Model} does.</p>\n<p>You use both, however, using the methods they both provide.</p>"},{"title":"TwoDraw","link":"<a href=\"TwoDraw.html\">TwoDraw</a>"},{"title":"World","link":"<a href=\"World.html\">World</a>","description":"<p>Create a new World object given an Object with optional\nminX, maxX, minY, maxY, minZ, maxZ overriding class properties.</p>"},{"title":"World.defaultOptions","link":"<a href=\"World.html#.defaultOptions\">World &rtrif; defaultOptions</a>","description":"<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>"},{"title":"World.defaultWorld","link":"<a href=\"World.html#.defaultWorld\">World &rtrif; defaultWorld</a>","description":"<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>"},{"title":"World#bboxTransform","link":"<a href=\"World.html#bboxTransform\">World &rtrif; bboxTransform</a>","description":"<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>"},{"title":"World#getOptions","link":"<a href=\"World.html#getOptions\">World &rtrif; getOptions</a>","description":"<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>"},{"title":"World#isOnWorld","link":"<a href=\"World.html#isOnWorld\">World &rtrif; isOnWorld</a>","description":"<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>"},{"title":"World#random3DPoint","link":"<a href=\"World.html#random3DPoint\">World &rtrif; random3DPoint</a>","description":"<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>"},{"title":"World#randomPatchPoint","link":"<a href=\"World.html#randomPatchPoint\">World &rtrif; randomPatchPoint</a>","description":"<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>"},{"title":"World#randomPoint","link":"<a href=\"World.html#randomPoint\">World &rtrif; randomPoint</a>","description":"<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>"},{"title":"Color","link":"<a href=\"Color.html\">Color</a>"},{"title":"Color.hexCssColor","link":"<a href=\"Color.html#.hexCssColor\">Color &rtrif; hexCssColor</a>"},{"title":"Color.hslCssColor","link":"<a href=\"Color.html#.hslCssColor\">Color &rtrif; hslCssColor</a>"},{"title":"Color.rgbaCssColor","link":"<a href=\"Color.html#.rgbaCssColor\">Color &rtrif; rgbaCssColor</a>"},{"title":"ColorMap","link":"<a href=\"ColorMap.html\">ColorMap</a>"},{"title":"ColorMap.arrayToTypedColors","link":"<a href=\"ColorMap.html#.arrayToTypedColors\">ColorMap &rtrif; arrayToTypedColors</a>"},{"title":"ColorMap.gradientImageData","link":"<a href=\"ColorMap.html#.gradientImageData\">ColorMap &rtrif; gradientImageData</a>"},{"title":"GIS","link":"<a href=\"tutorial-GIS.html\">GIS</a>"},{"title":"IDE Examples","link":"<a href=\"tutorial-IDE Examples.html\">IDE Examples</a>"},{"title":"MVC","link":"<a href=\"tutorial-MVC.html\">MVC</a>"},{"title":"View 2","link":"<a href=\"tutorial-View 2.html\">View 2</a>"},{"title":"View 3","link":"<a href=\"tutorial-View 3.html\">View 3</a>"},{"title":"View 3D","link":"<a href=\"tutorial-View 3D.html\">View 3D</a>"}]}